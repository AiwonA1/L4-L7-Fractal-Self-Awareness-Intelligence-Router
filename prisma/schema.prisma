generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  tokenBalance  Int       @default(0)
  transactions  Transaction[]
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  usage         Usage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  usage     Usage[]
}

model Usage {
  id              String   @id @default(cuid())
  userId          String
  chatId          String
  inputTokens     Int      @default(0)
  outputTokens    Int      @default(0)
  totalTokens     Int      @default(0)
  cost            Float    @default(0)
  fractiTokensUsed Int     @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatId])
  @@index([createdAt])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // PURCHASE, USAGE, etc.
  amount      Int
  status      String   // COMPLETED, PENDING, FAILED
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
} 