generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  tokenBalance    Int       @default(0)
  stripeCustomerId String?
  transactions    Transaction[]
  accounts        Account[]
  sessions        Session[]
  chats           Chat[]
  usage           Usage[]
  passwordResets  PasswordReset[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  usage     Usage[]

  @@map("chats")
}

model Usage {
  id              String   @id @default(cuid())
  userId          String
  chatId          String
  inputTokens     Int      @default(0)
  outputTokens    Int      @default(0)
  totalTokens     Int      @default(0)
  cost            Float    @default(0)
  fractiTokensUsed Int     @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatId])
  @@index([createdAt])
  @@map("usage")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // PURCHASE, USAGE, etc.
  amount      Int      // Amount in cents
  status      String   // COMPLETED, FAILED, etc.
  description String
  metadata    Json?    // For storing additional data like paymentIntentId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("transactions")
} 